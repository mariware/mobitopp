plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
}

// Set source and target compatibility
sourceCompatibility = '23'
targetCompatibility = '23'

repositories {
    mavenLocal()
    mavenCentral()
    // Removed jcenter as it is deprecated
}

configurations {
    testImplementation.extendsFrom compileOnly
}

dependencies {
    annotationProcessor libraries.lombok
    compileOnly libraries.lombok

    implementation libraries.actitopp,
            libraries.opencsv,
            libraries.commons_compress,
            libraries.snakeyaml,
            libraries.rhino,
            libraries.rhino_engine,
            libraries.log4j,
            libraries.slf4j,
            libraries.gson

    testAnnotationProcessor libraries.lombok
    testImplementation libraries.lombok // Replaced testCompileOnly
    testImplementation libraries.junit_jupiter,
            libraries.junit_migrationsupport,
            libraries.assertj,
            libraries.hamcrest_all,
            libraries.hamcrest_optional,
            libraries.mockito_core,
            libraries.mockito_junit_jupiter,
            libraries.equalsverifier

    testRuntimeOnly libraries.junit_vintage // Replaced testRuntime
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"
}

eclipse {
    classpath {
        downloadSources = true
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
        java.srcDirs = ['src/integration-test/java']
        resources.srcDirs = ['src/integration-test/resources']
    }
}

test {
    useJUnitPlatform()
    enableAssertions = "true"
    maxHeapSize = "2G"
    testLogging.showStandardStreams = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources') // Updated from classifier
    from sourceSets.main.allSource
}

javadoc {
    options.encoding = "UTF-8"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc') // Updated from classifier
    from javadoc.destinationDir
}

publishing {
    publications {
        release(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
        }
        snapshot(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            def buildNumber = project.hasProperty('build_number') ? project.property('build_number') : '123'
            def snapshotVersion = project.version.replaceAll("\\.${buildNumber}", '') + '-SNAPSHOT'
            version snapshotVersion
        }
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
            pom {
                name = 'mobiTopp'
                description = 'mobiTopp (http://mobitopp.ifv.kit.edu/) is an agent-based travel demand model...'
                url = 'https://github.com/kit-ifv/mobitopp'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0-standalone.html'
                    }
                }
                developers {
                    developer {
                        id = 'lb'
                        name = 'Lars Briem'
                        email = 'lars.briem@kit.edu'
                    }
                    developer {
                        id = 'jk'
                        name = 'Jelle Kuebler'
                        email = 'jelle.kuebler@kit.edu'
                    }
                }
                scm {
                    connection = 'scm:git:git:https://github.com/kit-ifv/mobitopp.git'
                    developerConnection = 'scm:git:ssh:git@github.com:kit-ifv/mobitopp.git'
                    url = 'https://github.com/kit-ifv/mobitopp'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'Internal'
            credentials {
                username getPropertyOrDefault('repositoryUsername')
                password getPropertyOrDefault('repositoryPassword')
            }
            def repositoryUrl = getPropertyOrDefault('repositoryUrl')
            def releasesRepoUrl = "${repositoryUrl}/repository/maven-releases"
            def snapshotsRepoUrl = "${repositoryUrl}/repository/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
            name = 'External'
            credentials {
                username getPropertyOrDefault('user_oss')
                password getPropertyOrDefault('pw_oss')
            }
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

task publishAndCheckRelease() {
    dependsOn publishReleasePublicationToInternalRepository

    if (project.hasProperty('isRelease') && project.property('isRelease').toBoolean()) {
        print('New Release')
        dependsOn publishMavenJavaPublicationToExternalRepository
    } else {
        print('No Release')
    }
}

configure(publishAndCheckRelease) {
    group = 'publishing'
    description = 'Publish to internal repo. Also publish staging release to external repo if "isRelease" is set.'
}

def getPropertyOrDefault(key) {
    return project.hasProperty(key) ? project.property(key) : key
}
